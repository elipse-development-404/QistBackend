generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id                  Int                   @id @default(autoincrement())
  category_id         Int?
  subcategory_id      Int?
  name                String
  brand               String?
  short_description   String?
  long_description    String?               @db.Text
  stock               Boolean               @default(true)
  createdAt           DateTime?             @default(now())
  updatedAt           DateTime?             @default(now())
  is_approved         Boolean               @default(false)
  status              Boolean               @default(false)
  slugName            String?
  isDeal              Boolean               @default(false)
  categories          categories?           @relation(fields: [category_id], references: [id], onDelete: Cascade)
  subcategories       subcategories?        @relation(fields: [subcategory_id], references: [id], onDelete: Cascade)
  ProductImage        ProductImage[]
  ProductInstallments ProductInstallments[]
  ProductDeals        ProductDeal[]

  @@index([category_id], map: "Product_category_id_fkey")
  @@index([subcategory_id], map: "Product_subcategory_id_fkey")
}

model ProductImage {
  id         Int     @id @default(autoincrement())
  url        String
  product_id Int
  Product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id], map: "ProductImage_product_id_fkey")
}

model ProductInstallments {
  id            Int      @id @default(autoincrement())
  product_id    Int
  advance       Float
  isActive      Boolean? @default(true)
  monthlyAmount Float
  months        Int
  totalPrice    Float
  dealId        Int?
  Deal          Deal?    @relation(fields: [dealId], references: [id], onDelete: Cascade)
  Product       Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id], map: "ProductInstallments_product_id_fkey")
  @@index([dealId], map: "ProductInstallments_dealId_fkey")
}

model admins {
  id        Int       @id @default(autoincrement())
  fullName  String    @db.VarChar(255)
  email     String    @unique(map: "email") @db.VarChar(255)
  password  String    @db.VarChar(255)
  createdAt DateTime? @default(now()) @db.DateTime(0)
}

model Customers {
  id          Int                  @id @default(autoincrement())
  email       String               @unique
  password    String
  firstName   String?
  lastName    String?
  phone       String?
  isVerified  Boolean              @default(false)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  verificationCodes VerificationCode[]
  passwordResetAttempts PasswordResetAttempt[]
  orders      CreateOrder[]
  addresses   Address[]
}

model VerificationCode {
  id          Int       @id @default(autoincrement())
  customerId  Int
  customer    Customers @relation(fields: [customerId], references: [id])
  code        String
  isForReset  Boolean
  expiry      DateTime
  createdAt   DateTime  @default(now())
}

model PasswordResetAttempt {
  id          Int       @id @default(autoincrement())
  customerId  Int
  customer    Customers @relation(fields: [customerId], references: [id])
  createdAt   DateTime  @default(now())
}

model categories {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  description   String?         @db.Text
  created_at    DateTime        @default(now()) @db.Timestamp(0)
  updated_at    DateTime        @default(now()) @db.Timestamp(0)
  isActive      Boolean?        @default(true)
  icon          String?         @db.Text
  slugName      String?
  Product       Product[]
  subcategories subcategories[]
  TopCategory   TopCategory[]
}

model subcategories {
  id          Int        @id @default(autoincrement())
  category_id Int
  name        String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(0)
  updated_at  DateTime   @default(now()) @db.Timestamp(0)
  isActive    Boolean?   @default(true)
  description String?    @db.Text
  slugName    String?
  Product     Product[]
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "subcategories_ibfk_1")

  @@index([category_id], map: "category_id")
}

model CreateOrder {
  id             Int        @id @default(autoincrement())
  customerId     Int?
  email          String     @db.VarChar(255)
  phone          String     @db.VarChar(20)
  firstName      String     @db.VarChar(100)
  lastName       String     @db.VarChar(100)
  cnic           String     @db.VarChar(13)
  city           String     @db.VarChar(100)
  area           String     @db.VarChar(100)
  address        String     @db.Text
  orderNotes     String?    @db.Text
  paymentMethod  String     @db.VarChar(50)
  productName    String     @db.VarChar(255)
  totalDealValue Decimal    @db.Decimal(10, 2)
  advanceAmount  Decimal    @db.Decimal(10, 2)
  monthlyAmount  Decimal    @db.Decimal(10, 2)
  months         Int
  createdAt      DateTime?  @default(now()) @db.Timestamp(0)
  status         OrderStatus @default(Pending)
  customer       Customers? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  @@index([customerId])
}

enum OrderStatus {
  Pending
  Confirmed
  Shipped
  Delivered
  Cancelled
}

model Address {
  id         Int       @id @default(autoincrement())
  customerId Int
  firstName  String
  lastName   String
  company    String?
  address1   String
  city       String
  region     String
  zipCode    String
  phone      String
  isDefault  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  customer   Customers @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
}

model Banner {
  id            Int      @id @default(autoincrement())
  image_url     String?
  cloudinary_id String?
  product_url   String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Deal {
  id                Int            @id @default(autoincrement())
  name              String
  startDate         DateTime
  endDate           DateTime
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  ProductDeals      ProductDeal[]
  ProductInstallments ProductInstallments[]
}

model ProductDeal {
  id               Int                @id @default(autoincrement())
  dealId           Int
  productId        Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Deal             Deal               @relation(fields: [dealId], references: [id], onDelete: Cascade)
  Product          Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  DealInstallments DealInstallments[]

  @@unique([dealId, productId])
  @@index([dealId])
  @@index([productId])
}

model DealInstallments {
  id              Int         @id @default(autoincrement())
  productDealId   Int
  totalPrice      Float
  monthlyAmount   Float
  advance         Float
  months          Int
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  ProductDeal     ProductDeal @relation(fields: [productDealId], references: [id], onDelete: Cascade)

  @@index([productDealId])
}

model TopCategory {
  id            Int         @id @default(autoincrement())
  category_id   Int
  image_url     String
  cloudinary_id String?
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  categories    categories  @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@index([category_id], map: "TopCategory_category_id_fkey")
}